name: TeamCity tests

on: [ push, workflow_dispatch ]

jobs:
  run_teamcity_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'

      # Install ifconfig
      - name: Install ifconfig
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: Set up host environment variable
        # Find current ip Selenoid UI docs: https://aerokube.com/selenoid-ui/latest/
        run: |
          echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

      - name: Set up host config property
        run: echo "host=$HOST:8111" > src/main/resources/config.properties

      - name: Set up browsers farm settings in config property
        run: echo "remote=http://$HOST:4444/wd/hub" >> src/main/resources/config.properties

      - name: Define browser in config property
        run: echo "browser=firefox" >> src/main/resources/config.properties

      - name: Verify config.properties
        run: cat src/main/resources/config.properties

      - name: Pull Selenoid Firefox
        run: docker pull selenoid/vnc:firefox_122.0

      - name: Run Selenoid
        # The -d flag runs the container in the background
        run: |
          docker run -d --name selenoid \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /${GITHUB_WORKSPACE}/infra/:/etc/selenoid/:ro \
          -p 4444:4444 \
          aerokube/selenoid

      # There's no point in this step, as Selenoid UI is not accessible via GitHub Actions. However, it's useful for local execution via act for debugging purposes
      - name: Run Selenoid UI
        run: |
          docker run -d --name selenoid-ui \
          -p 8080:8080 \
          aerokube/selenoid-ui \
          --selenoid-uri http://$HOST:4444

      - name: Run TeamCity server
        # The `-u 0` flag runs the container as root to allow write access to directories specified in the volume.
        # TO DO: Use `chown -R 1000:1000` on these directories and run the container without this flag.
        run: |
          docker run -u 0 -d --name teamcity-server \
          -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs \
          -p 8111:8111 \
          jetbrains/teamcity-server:2023.11.1

      - name: Set up TeamCity server
        # Server setup during the first run (accepting the license, selecting the database, etc.), implemented as a test
        run: ./mvnw clean test -Dtest=com.example.teamcity.ui.SetUpTest#startUpTest

      - name: Set up superUserToken environment variable
        # Extract the line with the last mention of the token from the container log, then take the 6th word, which corresponds to the token
        run: echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV

      - name: Set up superUserToken config property
        run: echo "superUserToken=$SUPER_USER_TOKEN" >> src/main/resources/config.properties

      - name: Verify config.properties
        run: cat src/main/resources/config.properties

      - name: Run all tests
        run: ./mvnw test

      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: target/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: $
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Install Swagger coverage
        run: |
          wget https://github.com/viclovsky/swagger-coverage/releases/download/1.5.0/swagger-coverage-1.5.0.zip
          unzip swagger-coverage-1.5.0.zip
          chmod +x swagger-coverage-commandline-1.5.0/bin/swagger-coverage-commandline

      - name: Run Swagger coverage
        if: always()
        run: swagger-coverage-commandline-1.5.0/bin/swagger-coverage-commandline -s http://$HOST:8111/app/rest/swagger.json -i swagger-coverage-output

      - name: Save Swagger coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swagger-coverage
          path: |
            swagger-coverage-report.html
            swagger-coverage-results.json